// <auto-generated />
using System;
using DAL.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220418141055_db")]
    partial class db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityLayer.Concrete.Admin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("PersonId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Branch", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("hospitalid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("hospitalid");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Doctor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<int?>("branchid")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("hospitalid")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("PersonId");

                    b.HasIndex("branchid");

                    b.HasIndex("hospitalid");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Hospital", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Meeting", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("confirmation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("doctorid")
                        .HasColumnType("int");

                    b.Property<int?>("hospitalid")
                        .HasColumnType("int");

                    b.Property<int?>("patientid")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("doctorid");

                    b.HasIndex("hospitalid");

                    b.HasIndex("patientid");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Patient", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("hospitalid")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("PersonId");

                    b.HasIndex("hospitalid");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Secretary", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<int?>("hospitalid")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("PersonId");

                    b.HasIndex("hospitalid");

                    b.ToTable("Secretaries");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Admin", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Branch", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Hospital", "hospital")
                        .WithMany("Branches")
                        .HasForeignKey("hospitalid");

                    b.Navigation("hospital");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Doctor", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("EntityLayer.Concrete.Branch", "branch")
                        .WithMany("Doctors")
                        .HasForeignKey("branchid");

                    b.HasOne("EntityLayer.Concrete.Hospital", "hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("hospitalid");

                    b.Navigation("branch");

                    b.Navigation("hospital");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Meeting", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Doctor", "doctor")
                        .WithMany("Meetings")
                        .HasForeignKey("doctorid");

                    b.HasOne("EntityLayer.Concrete.Hospital", "hospital")
                        .WithMany("Meetings")
                        .HasForeignKey("hospitalid");

                    b.HasOne("EntityLayer.Concrete.Patient", "patient")
                        .WithMany("Meetings")
                        .HasForeignKey("patientid");

                    b.Navigation("doctor");

                    b.Navigation("hospital");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Patient", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("EntityLayer.Concrete.Hospital", "hospital")
                        .WithMany("Patients")
                        .HasForeignKey("hospitalid");

                    b.Navigation("hospital");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Secretary", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("EntityLayer.Concrete.Hospital", "hospital")
                        .WithMany("Secretaries")
                        .HasForeignKey("hospitalid");

                    b.Navigation("hospital");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Branch", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Doctor", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Hospital", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Doctors");

                    b.Navigation("Meetings");

                    b.Navigation("Patients");

                    b.Navigation("Secretaries");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Patient", b =>
                {
                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
